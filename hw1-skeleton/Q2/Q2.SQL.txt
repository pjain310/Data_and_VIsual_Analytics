-- Setup. DO NOT REMOVE.
.headers on
.separator ','

DROP TABLE IF EXISTS movies;
DROP TABLE IF EXISTS movie_cast;
DROP VIEW IF EXISTS good_collaboration;
DROP TABLE IF EXISTS movie_overview;

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (a.i) Create tables

-- [insert your SQL statement(s) BELOW this line]

.mode csv

create table movies (id integer, name text, score integer);

create table movie_cast (movie_id integer, cast_id integer, cast_name text);

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.tables
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (a.ii) Import data

-- [insert your SQLite command(s) BELOW this line]

.import ./movie-name-score.txt movies

.import ./movie-cast.txt movie_cast

-- [insert your SQLite command(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.headers off
SELECT COUNT(*) FROM movies;
SELECT COUNT(*) FROM movie_cast;
.headers on
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (b) Create indexes

-- [insert your SQL statement(s) BELOW this line]

create index scores_index on movies(score);
create index cast_index on movie_cast(cast_id);
create index movie_index on movies(id);


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.indexes
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (c) Calculate a proportion

-- [insert your SQL statement(s) BELOW this line]

select count(*)*100.00/(select count(*)from movies) as prop
from movies
where score > 50;


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (d) Find the highest scoring movies

-- [insert your SQL statement(s) BELOW this line]

select *
from movies
order by score desc, name
limit 7;


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (e) Find the most prolific actors

-- [insert your SQL statement(s) BELOW this line]

select cast_id,cast_name,count(*) as movie_count
from movie_cast
group by cast_id
order by movie_count desc
limit 5;

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (f) Get high scoring actors

-- [insert your SQL statement(s) BELOW this line]

select cast_id, cast_name, avg(score) as average_score
from movie_cast
inner join movies on movies.id = movie_cast.movie_id
where score>50 and cast_id in (select cast_id from movie_cast group by cast_id having count(cast_id)>2)
group by cast_id
order by average_score desc, cast_name
limit 10;

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (g) Creating views

-- [insert your SQL statement(s) BELOW this line]

create view good_collaboration as
select a.cast_id as cast_id_1,b.cast_id as cast_id_2, count(*) as movie_count, avg(movies.score) as average_movie_score
from movie_cast as a, movie_cast as b
inner join movies on a.movie_id=movies.id
where a.movie_id=b.movie_id and a.cast_id!=b.cast_id and a.cast_id<b.cast_id
group by a.cast_id,b.cast_id having count(*)>2 and avg(movies.score)>40
order by avg(movies.score) desc;

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.headers off
PRAGMA table_info(good_collaboration);
SELECT AVG(average_movie_score) FROM good_collaboration;
.headers on
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (h) Find the best collaborators

-- [insert your SQL statement(s) BELOW this line]

create view cast_collabs as
select cast_id_1 as cast_id
from good_collaboration
union
select cast_id_2 as cast_id
from good_collaboration;

select cast_collabs.cast_id, movie_cast.cast_name, avg(good_collaboration.average_movie_score) as collaboration_score
from good_collaboration
inner join cast_collabs on cast_collabs.cast_id=good_collaboration.cast_id_1 or cast_collabs.cast_id=good_collaboration.cast_id_2
inner join movie_cast on movie_cast.cast_id=cast_collabs.cast_id
group by cast_collabs.cast_id
order by collaboration_score desc,movie_cast.cast_name
limit 5;

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (i) Create FTS table and import data

-- [insert your SQL statement(s) BELOW this line]

create virtual table movie_overview using fts3(
        id integer,
        name text,
        year integer,
        overview text,
        popularity decimal);

.import ./movie-overview.txt movie_overview

-- [insert your SQL statement(s) ABOVE this line]

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (i.1) Count movies with "fight"

-- [insert your SQL statement(s) BELOW this line]

select count(*) as count_overview from movie_overview where overview match 'fight';

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (i.2) List movies with "love" and "story" nearby

-- [insert your SQL statement(s) BELOW this line]

select id from movie_overview where overview match 'love NEAR/5 story';

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --
